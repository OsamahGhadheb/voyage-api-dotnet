{"version":3,"sources":["../app/app.module.js","../app/app.config.js","../app/account/account.service.js","../app/account/login.component.js","../app/account/register.component.js","../app/core/authorization.interceptor.js","../app/core/authorization.service.js","../app/core/constants.js","../app/core/error.service.js","../app/dashboard/dashboard.component.js","../app/header/header.component.js","../app/header/secure.header.component.js","../app/nav/empty-nav.component.js","../app/nav/secure-nav.component.js","../app/role/add-claim.component.js","../app/role/add-role.component.js","../app/role/role.service.js","../app/status/status-list.component.js","../app/status/status.component.js","../app/status/status.service.js","../app/user/assign-role.component.js","../app/user/user.service.js","../app/widget/widget.component.js","../app/widget/widget.service.js"],"names":["angular","module","configure","$stateProvider","$urlRouterProvider","$httpProvider","interceptors","push","otherwise","states","name","url","views","content","component","header","nav","forEach","state","config","AccountService","$q","$http","authorizationService","login","username","password","deferred","defer","post","headers","Content-Type","success","response","setToken","access_token","resolve","promise","register","user","email","confirmPassword","then","data","reject","service","factory","$inject","LoginController","accountService","$state","constants","$log","userService","vm","_loginCallback","result","getClaimsMap","claimsMap","setClaims","hasClaim","lssClaimType","claims","go","info","this","$onInit","$onChanges","changesObj","$onDestory","templateUrl","controller","controllerAs","bindings","Binding","RegisterController","errorService","registrationErrors","failure","errors","getModelStateErrors","AuthorizationInterceptor","request","token","getToken","Authorization","responseError","status","AuthorizationService","_claimsMap","claimType","claimValue","_accessToken","constant","ErrorService","modelState","key","i","length","DashboardController","widgetService","getWidgets","widgets","HeaderController","logout","EmptyNavController","$ctrl","SecureNavController","_refreshNavigation","_addState","addClaim","claimName","stateDisplayName","AddClaimController","roleService","save","selectedRole","roles","getRoles","AddRoleController","addRole","roleName","err","RoleService","role","get","roleClaim","claim","StatusListController","statusService","statuses","getStatus","error","StatusController","StatusService","AssignRoleController","assign","selectedUser","users","getUsers","UserService","userRole","getClaims","map","reduce","previous","current","WidgetController","widget","WidgetService"],"mappings":"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","file":"launchpad-app.min.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    angular\r\n        .module(\"lss-launchpad\", ['ui.router']);\r\n        \r\n})();","(function(){\r\n    angular\r\n        .module(\"lss-launchpad\")\r\n        .config(['$stateProvider', '$urlRouterProvider', '$httpProvider', configure]);\r\n\r\n    function configure($stateProvider, $urlRouterProvider, $httpProvider){\r\n\r\n        //Configure http interceptors\r\n        $httpProvider.interceptors.push('authorizationInterceptor');\r\n\r\n        //Configure default route\r\n        $urlRouterProvider.otherwise('/login');\r\n\r\n        //Configure ui states\r\n        var states = [\r\n        { \r\n            name: 'login', \r\n            url: '/login',\r\n            views: {\r\n                content: {\r\n                    // Using component: instead of template:\r\n                    component: 'lssLogin'\r\n                },\r\n                header: {\r\n                    component: 'lssHeader'\r\n                },\r\n                nav: {\r\n                    component: 'lssEmptyNav'\r\n                }\r\n            }\r\n             \r\n        },\r\n        { \r\n            name: 'register', \r\n            url: '/register',\r\n            views: {\r\n                content: {\r\n                    // Using component: instead of template:\r\n                    component: 'lssRegister'\r\n                },\r\n                header: {\r\n                    component: 'lssHeader'\r\n                },\r\n                nav: {\r\n                    component: 'lssEmptyNav'\r\n                }\r\n            }\r\n             \r\n        },\r\n        {\r\n            name: 'dashboard',\r\n            url: '/dashboard',\r\n            views: {\r\n                content: {\r\n                    // Using component: instead of template:\r\n                    component: 'lssDashboard'\r\n                },\r\n                header: {\r\n                    component: 'lssSecureHeader'\r\n                },\r\n                nav: {\r\n                    component: 'lssSecureNav'\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'addRole',\r\n            url: '/addRole',\r\n            views: {\r\n                content: {\r\n                    // Using component: instead of template:\r\n                    component: 'lssAddRole'\r\n                },\r\n                header: {\r\n                    component: 'lssSecureHeader'\r\n                },\r\n                nav: {\r\n                    component: 'lssSecureNav'\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'addClaim',\r\n            url: '/addClaim',\r\n               views: {\r\n                content: {\r\n                    // Using component: instead of template:\r\n                    component: 'lssAddClaim'\r\n                },\r\n                header: {\r\n                    component: 'lssSecureHeader'\r\n                },\r\n                nav: {\r\n                    component: 'lssSecureNav'\r\n                }\r\n            }\r\n        },\r\n        {\r\n            name: 'userDashboard',\r\n            url: '/userDashboard',\r\n            views: {\r\n                content: {\r\n                    // Using component: instead of template:\r\n                    component: 'lssAssignRole'\r\n                },\r\n                header: {\r\n                    component: 'lssSecureHeader'\r\n                },\r\n                nav: {\r\n                    component: 'lssSecureNav'\r\n                }\r\n            }\r\n        }\r\n\r\n        ];\r\n\r\n        // Loop over the state definitions and register them\r\n        states.forEach(function(state) {\r\n            $stateProvider.state(state);\r\n        });\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .factory('accountService', AccountService);\r\n\r\n    AccountService.$inject = ['$q', '$http', 'authorizationService'];\r\n    function AccountService($q, $http, authorizationService) {\r\n        var service = {\r\n            login:login,\r\n            register: register\r\n           \r\n        };\r\n        \r\n        return service;\r\n\r\n        ////////////////\r\n        function login(username, password) { \r\n            var deferred = $q.defer();\r\n \r\n            var content = \"grant_type=password&username=\" + username + \"&password=\" + password;  \r\n         \r\n            $http.post(\"/Token\", content, {\r\n                headers: { 'Content-Type' :  'application/x-www-form-urlencoded'  }\r\n            })\r\n            .success(function(response){\r\n                authorizationService.setToken(response.access_token);\r\n                deferred.resolve(true);\r\n            });\r\n            return deferred.promise;\r\n        }\r\n\r\n\r\n      \r\n\r\n        function register(username, password){\r\n            var deferred = $q.defer();\r\n\r\n            var user = {\r\n                email: username,\r\n                password: password,\r\n                confirmPassword: password\r\n            };\r\n\r\n            $http.post(\"/api/account/register\", user)\r\n                .then(function(response){\r\n                    deferred.resolve(response.data);\r\n                }, \r\n                function(response){\r\n                    deferred.reject(response.data);\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssLogin', {\r\n            //template:'login.component.html',\r\n            templateUrl: '/app/account/login.component.html',\r\n            controller: LoginController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n                Binding: '=',\r\n            },\r\n        });\r\n\r\n    LoginController.$inject = ['accountService', '$state', 'authorizationService', 'lssConstants', '$log', 'userService'];\r\n    function LoginController(accountService, $state, authorizationService, constants, $log, userService) {\r\n        var vm = this;\r\n        vm.login = login;\r\n        vm.username = 'fred@fred.com';\r\n        vm.password = 'Hello123!';\r\n        \r\n        ////////////////\r\n\r\n        vm.$onInit = function() { };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n\r\n        function login(){\r\n            \r\n            accountService.login(vm.username, vm.password)\r\n                .then(_loginCallback);\r\n        }\r\n\r\n        function _loginCallback(result){\r\n            userService.getClaimsMap()\r\n                .then(function(claimsMap){\r\n                    authorizationService.setClaims(claimsMap);\r\n                    if(authorizationService.hasClaim(constants.lssClaimType, constants.claims.login)){\r\n                        $state.go('dashboard');\r\n                    }else{\r\n                        $log.info('User does not have required claim: ' + constants.claims.login);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssRegister', {\r\n            //template:'htmlTemplate',\r\n            templateUrl: '/app/account/register.component.html',\r\n            controller: RegisterController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n                Binding: '=',\r\n            },\r\n        });\r\n\r\n    RegisterController.$inject = ['accountService', '$state', 'errorService'];\r\n    function RegisterController(accountService, $state, errorService) {\r\n        var vm = this;\r\n        vm.username = '';\r\n        vm.password = '';\r\n        vm.confirmPassword = '';\r\n        vm.register = register;\r\n        vm.registrationErrors = [];\r\n\r\n        ////////////////\r\n\r\n        vm.$onInit = function() { };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n\r\n        function register(){\r\n            if(vm.password == vm.confirmPassword){\r\n                accountService.register(vm.username, vm.password)\r\n                .then(\r\n                    function(result){\r\n                        vm.registrationErrors = [];\r\n                        $state.go('login');\r\n                    },\r\n                    function(failure){\r\n                        var errors = errorService.getModelStateErrors(failure);\r\n                        vm.registrationErrors = errors;\r\n                    }\r\n                );\r\n            }\r\n            else{\r\n                vm.registrationErrors = ['Passwords must match'];\r\n            }\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .factory('authorizationInterceptor', AuthorizationInterceptor);\r\n\r\n\r\n    AuthorizationInterceptor.$inject = ['$q', 'authorizationService', '$state'];\r\n    function AuthorizationInterceptor($q, authorizationService, $state) {\r\n    \r\n        var service = {\r\n            request: request,\r\n            responseError: responseError\r\n        };\r\n        return service;\r\n\r\n        ////////////////\r\n        function request(config) { \r\n            var token = authorizationService.getToken();\r\n            if(token){\r\n                config.headers.Authorization = 'bearer ' + token;\r\n            }\r\n            return config;\r\n        }\r\n\r\n        function responseError(response){\r\n            var deferred = $q.defer();\r\n            if(response.status == 401){\r\n                $state.go('login');\r\n            }\r\n            deferred.reject(response);\r\n            return deferred.promise;\r\n        }\r\n\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .factory('authorizationService', AuthorizationService);\r\n\r\n    AuthorizationService.$inject = ['$q'];\r\n    function AuthorizationService($q) {\r\n        var _accessToken = null;\r\n        var _claimsMap = {};\r\n\r\n        var service = {\r\n           setToken : setToken,\r\n           getToken : getToken,\r\n           hasClaim : hasClaim,\r\n           setClaims: setClaims\r\n        };\r\n        \r\n        return service;\r\n\r\n        function setClaims(claimsMap){\r\n            _claimsMap = claimsMap;\r\n        }\r\n\r\n\r\n        function hasClaim(claimType, claimValue){\r\n            var hasClaim = _claimsMap[claimType + \"->\" + claimValue] === true;       \r\n            return hasClaim;\r\n        }\r\n\r\n        function setToken(token) { \r\n            _accessToken = token;\r\n            if(_accessToken === null){\r\n               \r\n                _claimsMap = {};\r\n            }\r\n        }\r\n\r\n        function getToken() {\r\n            return _accessToken;\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .constant('lssConstants', {\r\n            lssClaimType : \"lss.permission\",\r\n            claims: {\r\n                login: \"login\"\r\n            }    \r\n        });\r\n})();\r\n\r\n    ","(function() {\r\n'use strict';\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .factory('errorService', ErrorService);\r\n    \r\n    //This could be an interceptor\r\n    function ErrorService() {\r\n        var service = {\r\n            getModelStateErrors:getModelStateErrors\r\n        };\r\n        \r\n        return service;\r\n\r\n        ////////////////\r\n        function getModelStateErrors(failure) { \r\n            var errors = [];\r\n            if(failure.modelState){\r\n                for(var key in failure.modelState){\r\n                    var states = failure.modelState[key];\r\n                    for(var i = 0; i < states.length; ++i){\r\n                        errors.push(states[i]);\r\n                    }\r\n                }\r\n            }\r\n            return errors;\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssDashboard', {\r\n            //template:'htmlTemplate',\r\n            templateUrl: '/app/dashboard/dashboard.component.html',\r\n            controller: DashboardController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n                Binding: '=',\r\n            },\r\n        });\r\n\r\n    DashboardController.$inject = ['widgetService'];\r\n    function DashboardController(widgetService) {\r\n        var vm = this;\r\n     \r\n\r\n        ////////////////\r\n\r\n        vm.$onInit = function() { \r\n            widgetService.getWidgets()\r\n                .then(function(response){\r\n                    vm.widgets = response;\r\n                });\r\n        };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssHeader', {\r\n            //template:'htmlTemplate',\r\n            templateUrl: '/app/header/header.component.html',\r\n            controller: HeaderController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n                Binding: '=',\r\n            },\r\n        });\r\n\r\n    function HeaderController() {\r\n        var vm = this;\r\n        \r\n\r\n        ////////////////\r\n\r\n        vm.$onInit = function() { };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssSecureHeader', {\r\n            //template:'htmlTemplate',\r\n            templateUrl: '/app/header/secure.header.component.html',\r\n            controller: HeaderController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n                Binding: '=',\r\n            },\r\n        });\r\n\r\n    HeaderController.$inject = ['authorizationService', '$state'];\r\n    function HeaderController(authorizationService, $state) {\r\n        var vm = this;\r\n        \r\n        vm.logout = logout;\r\n\r\n        ////////////////\r\n\r\n        vm.$onInit = function() { };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n\r\n        function logout(){\r\n            authorizationService.setToken(null);\r\n            $state.go(\"login\");\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssEmptyNav', {\r\n            templateUrl: '/app/nav/empty-nav.component.html',\r\n            controller: EmptyNavController,\r\n            bindings: {\r\n            },\r\n        });\r\n\r\n    function EmptyNavController() {\r\n        var $ctrl = this;\r\n        \r\n\r\n        ////////////////\r\n\r\n        $ctrl.$onInit = function() { };\r\n        $ctrl.$onChanges = function(changesObj) { };\r\n        $ctrl.$onDestory = function() { };\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssSecureNav', {\r\n            templateUrl: '/app/nav/secure-nav.component.html',\r\n            controller: SecureNavController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n\r\n            },\r\n        });\r\n\r\n    SecureNavController.$inject = ['authorizationService', 'lssConstants'];\r\n    function SecureNavController(authorizationService, constants) {\r\n        var vm = this;\r\n        vm.states = [];\r\n\r\n\r\n        ////////////////\r\n\r\n\r\n        vm.$onInit = function() { \r\n            _refreshNavigation();\r\n        };\r\n\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n\r\n        function _refreshNavigation(){\r\n            vm.states = [];\r\n            _addState(constants.lssClaimType, constants.claims.addClaim, \"Claims\", \"addClaim\");\r\n        }\r\n\r\n        function _addState(claimType, claimName, stateDisplayName, state){\r\n            if(authorizationService.hasClaim(claimType, claimName)){\r\n                vm.states.push({name: stateDisplayName, state: state});\r\n            }\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssAddClaim', {\r\n            templateUrl:'/app/role/add-claim.component.html',\r\n            controller: AddClaimController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n            },\r\n        });\r\n\r\n    AddClaimController.$inject = ['roleService'];\r\n    function AddClaimController(roleService) {\r\n        var vm = this;\r\n        \r\n        vm.claimType = \"\";\r\n        vm.claimValue = \"\";\r\n        vm.roles = [];\r\n        vm.save = save;\r\n\r\n        ////////////////\r\n\r\n        vm.$onInit = function() { \r\n            roleService.getRoles()\r\n                .then(function(roles){\r\n                    vm.roles = roles;\r\n                    vm.selectedRole = vm.roles[0];\r\n                });\r\n        };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n\r\n        function save(){\r\n\r\n            roleService.addClaim(vm.selectedRole, vm.claimType, vm.claimValue)\r\n                .then(function(data){\r\n                    vm.claimType = '';\r\n                    vm.claimValue = '';\r\n                });\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssAddRole', {\r\n            templateUrl:'/app/role/add-role.component.html',\r\n            controller: AddRoleController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n                //Binding: '=',\r\n            },\r\n        });\r\n\r\n    AddRoleController.$inject = ['roleService'];\r\n    function AddRoleController(roleService) {\r\n        var vm = this;\r\n        \r\n        vm.roleName = \"\";\r\n        vm.save = save;\r\n\r\n        ////////////////\r\n\r\n        vm.$onInit = function() { };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n\r\n        function save(){\r\n            roleService.addRole(vm.roleName)\r\n                .then(\r\n                  function(data){\r\n                      vm.roleName = \"\";\r\n                  },\r\n                  function(err){\r\n\r\n                  }\r\n                );\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .factory('roleService', RoleService);\r\n\r\n    RoleService.$inject = ['$http', '$q'];\r\n    function RoleService($http, $q) {\r\n        var service = {\r\n            addRole: addRole,\r\n            getRoles: getRoles,\r\n            addClaim: addClaim\r\n        };\r\n        \r\n        return service;\r\n\r\n        ////////////////\r\n        function addRole(roleName) { \r\n            var deferred = $q.defer();\r\n\r\n            var role = {\r\n                name: roleName\r\n            };\r\n\r\n            $http.post('/api/role', role)\r\n                 .then(function(response){\r\n                     deferred.resolve(true);\r\n                 }, \r\n                 function(response){\r\n                     deferred.reject(response.data);\r\n                 });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function getRoles(){\r\n            var deferred = $q.defer();\r\n\r\n            $http.get('/api/role')\r\n                .then(function(response){\r\n                    deferred.resolve(response.data);\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function addClaim(role, claimType, claimValue){\r\n            var deferred = $q.defer();\r\n            var roleClaim = {\r\n                role: role,\r\n                claim: {\r\n                    claimType: claimType,\r\n                    claimValue: claimValue\r\n                }\r\n            };\r\n\r\n            $http.post('/api/role/claim', roleClaim)\r\n                .then(function(response){\r\n                    deferred.resolve(response.data);\r\n                },\r\n                function(err){\r\n                    deferred.reject(err.data);\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssStatusList', {\r\n            //template:'htmlTemplate',\r\n            templateUrl: '/app/status/status-list.component.html',\r\n            controller: StatusListController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n                Binding: '=',\r\n            },\r\n        });\r\n\r\n    StatusListController.$inject = ['statusService'];\r\n    function StatusListController(statusService) {\r\n        var vm = this;\r\n        vm.statuses = [];\r\n\r\n        ////////////////\r\n\r\n        vm.$onInit = function() { \r\n            statusService.getStatus()\r\n                .then(\r\n                    function(statuses){\r\n                        vm.statuses = statuses;\r\n                    },\r\n                    function(error){\r\n\r\n                    }\r\n                );\r\n        };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssStatus', {\r\n            //template:'htmlTemplate',\r\n            templateUrl: '/app/status/status.component.html',\r\n            controller: StatusController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n                status: '=',\r\n            },\r\n        });\r\n\r\n    function StatusController() {\r\n        var vm = this;\r\n        \r\n\r\n        ////////////////\r\n\r\n        vm.$onInit = function() { };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .factory('statusService', StatusService);\r\n\r\n    StatusService.$inject = ['$http', '$q'];\r\n    function StatusService($http, $q) {\r\n        var service = {\r\n            getStatus: getStatus\r\n        };\r\n        \r\n        return service;\r\n\r\n        ////////////////\r\n        function getStatus() { \r\n             var deferred = $q.defer();\r\n            $http.get(\"/api/v2/status\")\r\n                .then(function(response){\r\n                    deferred.resolve(response.data);\r\n                },\r\n                function(response){\r\n                    deferred.reject(response.status);\r\n                }\r\n                );\r\n            return deferred.promise;\r\n        }\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('lssAssignRole', {\r\n            templateUrl: '/app/user/assign-role.component.html',\r\n            controller: AssignRoleController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n            },\r\n        });\r\n\r\n    AssignRoleController.$inject = ['roleService', 'userService'];\r\n    function AssignRoleController(roleService, userService) {\r\n        var vm = this;\r\n        \r\n        vm.users = [];\r\n        vm.roles = [];\r\n        vm.assign = assign;\r\n\r\n        ////////////////\r\n\r\n        vm.$onInit = function() { \r\n            roleService.getRoles()\r\n                .then(function(roles){\r\n                    vm.roles = roles;\r\n                    vm.selectedRole = vm.roles[0];\r\n                });\r\n            userService.getUsers()\r\n                .then(function(users){\r\n                    vm.users = users;\r\n                    vm.selectedUser = vm.users[0];\r\n                });\r\n        };\r\n        vm.$onChanges = function(changesObj) { };\r\n        vm.$onDestory = function() { };\r\n\r\n        function assign(){\r\n            userService.assign(vm.selectedRole, vm.selectedUser)\r\n                .then(function(result){\r\n                    \r\n                });\r\n        }\r\n\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .factory('userService', UserService);\r\n\r\n    UserService.$inject = ['$q', '$http'];\r\n    function UserService($q, $http) {\r\n        var service = {\r\n            getUsers: getUsers,\r\n            assign: assign,\r\n            getClaims: getClaims,\r\n            getClaimsMap: getClaimsMap\r\n        };\r\n        \r\n        return service;\r\n\r\n        ////////////////\r\n        function getUsers(){\r\n            var deferred = $q.defer();\r\n\r\n            $http.get('/api/user')\r\n                .then(function(response){\r\n                    deferred.resolve(response.data);\r\n                });\r\n\r\n            return deferred.promise;\r\n        }\r\n\r\n        function assign(role, user){\r\n            var deferred = $q.defer();\r\n\r\n            var userRole = {\r\n                role: role,\r\n                user: user\r\n            };\r\n\r\n            $http.post('/api/user/assign', userRole)\r\n                .then(function(response)\r\n                {\r\n                    deferred.resolve(response.data);\r\n                });\r\n            return deferred.promise;\r\n        }\r\n\r\n        function getClaims(){\r\n            var deferred = $q.defer();\r\n\r\n            $http.get('api/user/claims')\r\n                .then(function(response){\r\n                    deferred.resolve(response.data);\r\n                });\r\n            return deferred.promise;\r\n        }\r\n\r\n        function getClaimsMap(){\r\n            var deferred = $q.defer();\r\n\r\n            getClaims().then(\r\n                function(claims){\r\n                    var map = {};\r\n                    claims.reduce(\r\n                        function(previous, current){\r\n                                previous[current.claimType + \"->\" + current.claimValue] = true;\r\n                                return previous;\r\n                            }, \r\n                            map);\r\n                   deferred.resolve(map);\r\n                });   \r\n\r\n            return deferred.promise;\r\n        }\r\n        \r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    // Usage:\r\n    // \r\n    // Creates:\r\n    // \r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .component('widget', {\r\n            //template:'htmlTemplate',\r\n            templateUrl: '/app/widget/widget.component.html',\r\n            controller: WidgetController,\r\n            controllerAs: 'vm',\r\n            bindings: {\r\n                widget: '=',\r\n            },\r\n        });\r\n\r\n    //WidgetController.$inject = ['dependency1'];\r\n    function WidgetController() {\r\n        var $ctrl = this;\r\n        \r\n\r\n        ////////////////\r\n\r\n        $ctrl.$onInit = function() { };\r\n        $ctrl.$onChanges = function(changesObj) { };\r\n        $ctrl.$onDestory = function() { };\r\n    }\r\n})();","(function() {\r\n'use strict';\r\n\r\n    angular\r\n        .module('lss-launchpad')\r\n        .factory('widgetService', WidgetService);\r\n\r\n    WidgetService.$inject = ['$http', '$q'];\r\n    function WidgetService($http, $q) {\r\n        var service = {\r\n            getWidgets: getWidgets\r\n        };\r\n        \r\n        return service;\r\n\r\n        ////////////////\r\n        function getWidgets() { \r\n            var deferred = $q.defer();\r\n            $http.get(\"/api/v2/widget\")\r\n                .then(function(response){\r\n                    deferred.resolve(response.data);\r\n                },\r\n                function(response){\r\n                    deferred.reject(response.status);\r\n                }\r\n                );\r\n            return deferred.promise;\r\n        }\r\n    }\r\n})();"]}