<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Voyage.Api</name>
    </assembly>
    <members>
        <member name="T:Voyage.Api.API.V1.ProfileController">
            <summary>
            Profile Controller
            </summary>
        </member>
        <member name="M:Voyage.Api.API.V1.ProfileController.#ctor(Microsoft.Owin.Security.IAuthenticationManager,Voyage.Services.Profile.IProfileService)">
            <summary>
            ProfileController Constructor
            </summary>
            <param name="authenticationManager"></param>
            <param name="profileService"></param>
        </member>
        <member name="M:Voyage.Api.API.V1.ProfileController.GetCurrentUser">
            <summary>
            Gets the current user's profile.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voyage.Api.API.V1.ProfileController.UpdateProfile(Voyage.Models.ProfileModel)">
            <summary>
            Updates the current user's profile.
            </summary>
            <param name="model"></param>
            <returns>The users updated profile.</returns>
        </member>
        <member name="T:Voyage.Api.API.V1.AdminController">
            <summary>
            Admin Constructor
            </summary>
        </member>
        <member name="M:Voyage.Api.API.V1.AdminController.#ctor(Voyage.Services.Admin.IAdminService)">
            <summary>
            AdminConstroller Constructor
            </summary>
            <param name="adminService"></param>
        </member>
        <member name="M:Voyage.Api.API.V1.AdminController.ToggleAccountStatus(System.String,Voyage.Models.ChangeAccountStatusModel)">
            <summary>
            Update users' account status
            </summary>
            <param name="userId"></param>
            <param name="changeAccountStatusModel"></param>
            <returns>A user record with an HTTP 200, or null with an HTTP 400.</returns>
        </member>
        <member name="T:Voyage.Api.API.V1.ApplicationInfoController">
            <summary>
            Application Info Controller
            </summary>
        </member>
        <member name="M:Voyage.Api.API.V1.ApplicationInfoController.#ctor(Voyage.Services.ApplicationInfo.IApplicationInfoService)">
            <summary>
            ApplicationInfoConstructorController
            </summary>
            <param name="applicationInfoService"></param>
        </member>
        <member name="M:Voyage.Api.API.V1.ApplicationInfoController.Get">
            <summary>
            Get application info
            </summary>
            <returns></returns>
        </member>
        <member name="T:Voyage.Api.API.v1.NotificationsController">
            <summary>
            Notification Controller
            </summary>
        </member>
        <member name="M:Voyage.Api.API.v1.NotificationsController.#ctor(Voyage.Services.Notification.INotificationService,Microsoft.Owin.Security.IAuthenticationManager)">
            <summary>
            Notifications Controller.
            </summary>
            <param name="notificationService"></param>
            <param name="authenticationManager"></param>
        </member>
        <member name="M:Voyage.Api.API.v1.NotificationsController.GetNotifications">
            <summary>
            Get all notifications for the current user
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voyage.Api.API.v1.NotificationsController.MarkNotificationAsRead(System.Int32)">
            <summary>
            Mark a single notification as read
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Voyage.Api.API.v1.NotificationsController.MarkAllNotificationsAsRead">
            <summary>
            Mark all nofications as read
            </summary>
            <returns></returns>
        </member>
        <member name="M:Voyage.Api.API.v1.NotificationsController.CreateNotification(Voyage.Models.NotificationModel)">
            <summary>
            Create a notification
            </summary>
            <param name="notification"></param>
            <returns></returns>
        </member>
        <member name="T:Voyage.Api.ContainerConfig">
            <summary>
            This is vanilla autofac configuration based on:
            http://docs.autofac.org/en/latest/integration/webapi.html#quick-start
            </summary>
        </member>
        <member name="T:Voyage.Api.WebModule">
            <summary>
            Configures the registrations for Autofac
            </summary>
        </member>
        <member name="M:Voyage.Api.WebModule.ConfigureLogging">
            <summary>
            Configure the SQL server sink
            </summary>
            <returns>ILogger interface (this will be registered as a singleton in the container)</returns>
            <remarks>Reference: https://github.com/serilog/serilog-sinks-mssqlserver</remarks>
        </member>
        <member name="T:Voyage.Api.Filters.ValidateModelAttribute">
            <summary>
            Returns a BadRequest response if the model is invalid
            </summary>
        </member>
        <member name="T:Voyage.Api.Middleware.Processors.ErrorResponseProcessor">
            <summary>
            Reads a the response as a string if it was an error
            </summary>
            <remarks>
            This assumes the write-only stream has been replaced
            with a read-write stream
            </remarks>
        </member>
        <member name="T:Voyage.Api.Middleware.Processors.ResponseProcessor">
            <summary>
            Basic response processor
            </summary>
        </member>
        <member name="T:Voyage.Api.Middleware.RewindResponseMiddleware">
            <summary>
            This middleware will replace the default response.body
            with a read/write stream. After all other middleware
            executes it will copy the contents to the default stream
            and re-assign it to the response.body
            </summary>
        </member>
    </members>
</doc>
